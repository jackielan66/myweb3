import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import Header from '../components/Header';
import { Box, Button, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormLabel, InputLabel, MenuItem, Select, Snackbar, Table, TableBody, TableCell, TableHead, TableRow, TextField, Typography } from '@mui/material';
import { useAccount, useBalance, useBlock, useBlockNumber, useReadContract, useReadContracts, useSimulateContract, useWriteContract } from 'wagmi';
import { ABI_CONTRACT, ADDRESS_CONTRACT } from '../utils/contractConfig'
import { parseEther, keccak256, toBytes, toUtf8Bytes } from 'viem';
import { useMemo, useState } from 'react';
import { ToastContainer, toast } from 'react-toastify';
import useStakeBase from '../hooks/useStakeBase';
import { useGetPoolList } from '../hooks/useGetPoolList';
import { useRouter } from 'next/router';
const ADMIN_ROLE = keccak256(toBytes("ADMIN_ROLE")); // 计算 ADMIN_ROLE 哈希值

const Home: NextPage = () => {
  const account = useAccount();
  const { data: currentBlockNumber } = useBlockNumber();
  const { startBlock, endBlock, rccPerBlock } = useStakeBase()
  const { data: isAdmin, isLoading } = useReadContract({
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
    functionName: "hasRole",
    args: [ADMIN_ROLE, account.address], // 判断当前 address 是否有 ADMIN_ROLE
    query: {
      enabled: Boolean(account.address),
    },
  });
  const { poolList, fetchPoolList } = useGetPoolList()


  const { writeContractAsync, writeContract, error } = useWriteContract();

  const poolData = useReadContract({
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
    functionName: 'pool',
    args: [0],
  });

  const poolLength = useReadContract({
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
    functionName: 'poolLength',
  });

  // console.log(poolData, "poolData")


  const handleAddPool = async (formData) => {
    try {
      await writeContractAsync({
        address: ADDRESS_CONTRACT.RccStake,
        abi: ABI_CONTRACT.RCCStake,
        functionName: 'addPool',
        args: [
          formData.stTokenAddress,
          formData.poolWeight,
          formData.minDepositAmount,
          formData.unstakeLockedBlocks,
          false
        ]
      })
      fetchPoolList()
    } catch (error) {
      console.log(error, "error eeror")
    }

  }

  let baseRccStakeConfig = {
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
  }

  // const [poolLength,] = multiContractsResult;
  // console.log(multiContractsResult, "multiContracts !!!");
  const [open, setOpen] = useState(false);
  const handleClose = () => {
    setOpen(false);
  };
  // console.log(poolList, "poolList")
  const router = useRouter()
  return (
    <div>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <Header />
      <main>
        <Container sx={{ gap: '20px' }} >
          <Box sx={{ gap: '15px', display: 'flex', flexDirection: 'column', alignItems: 'center' }} >
            <Typography variant='h6' align='center' >
              Home Page Stake Infomation
            </Typography>
            <Typography variant='body2' align='center' >
              有效区块时间 {startBlock}  -  {endBlock} (当前链上最新区块{currentBlockNumber})
            </Typography>
            <Typography variant='body2' align='center' >
              每个区块获得的RCC奖励：{rccPerBlock}
            </Typography>
            <Typography variant='body2' align='center' >
              用户：{account.address}
            </Typography>
          </Box>


          <Box sx={{
            marginTop: '30px',
            border: '1px solid #eee',
            borderRadius: '12px',
            p: '20px',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }} >
            {
              poolData.data ? <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }} >

                <Table>
                  <TableHead>
                    <TableRow>
                      {/* stTokenAddress: 质押代币的地址。
poolWeight: 质押池的权重，影响奖励分配。
lastRewardBlock: 最后一次计算奖励的区块号。
accRCCPerST: 每个质押代币累积的 RCC 数量。
stTokenAmount: 池中的总质押代币量。
minDepositAmount: 最小质押金额。
unstakeLockedBlocks: 解除质押的锁定区块数。 */}
                      <TableCell>
                        池子ID
                      </TableCell>
                      <TableCell>
                        质押代币的地址
                      </TableCell>
                      <TableCell>
                        质押池的权重
                      </TableCell>
                      <TableCell>
                        质押开始区块号
                      </TableCell>
                      <TableCell>
                        质押结算区块号
                      </TableCell>
                      <TableCell>
                        每个质押代币累积的 RCC 数量
                      </TableCell>
                      <TableCell>
                        池中的总质押代币量
                      </TableCell>
                      <TableCell>
                        最小质押金额
                      </TableCell>
                      <TableCell>
                        操作
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {
                      poolList.map((item, index) => {
                        return <TableRow>
                          <TableCell>
                            {index}
                          </TableCell>
                          <TableCell>
                            {item.stTokenAddress}
                          </TableCell>
                          <TableCell>
                            {item.poolWeight}
                          </TableCell>
                          <TableCell>
                            {item.lastRewardBlock}
                          </TableCell>
                          <TableCell>
                            {item.lastRewardBlock + item.unstakeLockedBlocks}
                          </TableCell>
                          <TableCell>
                            {item.accRCCPerST}
                          </TableCell>
                          <TableCell>
                            {item.stTokenAmount}
                          </TableCell>
                          <TableCell>
                            {item.minDepositAmount}
                          </TableCell>
                          <TableCell>
                            <Button variant='contained' onClick={() => {
                                router.push('/stake/'+index)
                            }}>
                              stake
                            </Button>
                            <Button variant='contained' onClick={() => {
                                     router.push('/withdraw/'+index)
                            }}>
                              withdraw
                            </Button>
                          </TableCell>
                        </TableRow>
                      })
                    }
                    {/* <TableRow>
                      <TableCell>
                        0
                      </TableCell>
                      {(poolData.data || []).map((item, index) => {
                        return <TableCell>
                          {item}
                        </TableCell>
                      })}
                    </TableRow> */}
                  </TableBody>
                </Table>


              </Box> : <></>
            }
            <Button
              variant='contained' sx={{ mt: '20px' }} onClick={() => {
                setOpen(true)
              }}>增加池</Button>

            <Button
              variant='contained' sx={{ mt: '20px' }} onClick={() => {
                writeContract({
                  address: ADDRESS_CONTRACT.RccStake,
                  abi: ABI_CONTRACT.RCCStake,
                  functionName: 'setStartBlock',
                  args: [
                    10
                  ]
                })
              }}>Test</Button>
          </Box>


          {
            open && <Dialog

              open={open}
              onClose={handleClose}
              slotProps={{
                paper: {
                  component: 'form',
                  onSubmit: (event: React.FormEvent<HTMLFormElement>) => {
                    event.preventDefault();
                    const formData = new FormData(event.currentTarget);
                    const formJson = Object.fromEntries((formData as any).entries());
                    console.log(formJson, "formJson");
                    if (!formJson.stTokenAddress) {
                      formJson.stTokenAddress = ADDRESS_CONTRACT.AddressZero
                    }
                    handleAddPool(formJson)
                  },
                },
              }}
            >
              <DialogTitle>新增池子</DialogTitle>
              <DialogContent>
                <DialogContentText>
                  当前池长度：{poolLength.data}
                </DialogContentText>
                <Box sx={{
                  mt: 2, display: 'flex', flexDirection: 'column', gap: '15px',
                  width: '500px'

                }}>
                  {
                    poolLength.data > 0 ? <FormControl fullWidth>
                      <InputLabel id="demo-simple-select-label">质押的代币(stTokenAddress)</InputLabel>
                      <Select
                        labelId="demo-simple-select-label"
                        id="stTokenAddress"
                        name="stTokenAddress"
                        label="质押的代币(stTokenAddress)"
                      >
                        <MenuItem value={ADDRESS_CONTRACT.TokenA}>{ADDRESS_CONTRACT.TokenA}</MenuItem>
                        <MenuItem value={ADDRESS_CONTRACT.TokenB}>{ADDRESS_CONTRACT.TokenB}</MenuItem>
                      </Select>
                    </FormControl>
                      :
                      <TextField
                        required
                        id="stTokenAddress"
                        name="stTokenAddress"
                        label="质押的代币(stTokenAddress)"
                        fullWidth
                        disabled={poolLength.data == 0}
                        defaultValue={ADDRESS_CONTRACT.AddressZero}
                      />
                  }

                  <TextField
                    autoFocus
                    required
                    type='number'
                    id="poolWeight"
                    name="poolWeight"
                    label="池权重(poolWeight)影响最后RCC奖励分配"
                    fullWidth
                  />
                  <TextField
                    autoFocus
                    required
                    type='number'
                    id="minDepositAmount"
                    name="minDepositAmount"
                    label="最少质押金额(minDepositAmount)"
                    fullWidth
                    variant="standard"
                  />
                  <TextField
                    autoFocus
                    required
                    type='number'
                    id="unstakeLockedBlocks"
                    name="unstakeLockedBlocks"
                    label="unstakeLockedBlocks 多久可以提取(比如输入10，则10个区块内不可以提取)"
                    fullWidth
                    variant="standard"
                  />
                </Box>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleClose}>Cancel</Button>
                <Button type="submit">Add</Button>
              </DialogActions>
            </Dialog>
          }


        </Container>
      </main>
    </div>
  );
};

export default Home;
