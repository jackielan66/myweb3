import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import Header from '../components/Header';
import { Box, Button, Container, Snackbar, Table, TableBody, TableCell, TableHead, TableRow, TextField, Typography } from '@mui/material';
import { useAccount, useBalance, useBlock, useBlockNumber, useReadContract, useReadContracts, useSimulateContract, useWriteContract } from 'wagmi';
import { ABI_CONTRACT, ADDRESS_CONTRACT } from '../utils/contractConfig'
import { parseEther, keccak256, toBytes, toUtf8Bytes } from 'viem';
import { useMemo, useState } from 'react';
import { ToastContainer, toast } from 'react-toastify';

const ADMIN_ROLE = keccak256(toBytes("ADMIN_ROLE")); // 计算 ADMIN_ROLE 哈希值
// const ADMIN_ROLE = "0x" + keccak256("ADMIN_ROLE").toString("hex"); // 计算角色的 keccak256 哈希
// const ADMIN_ROLE = keccak256(toUtf8Bytes('ADMIN_ROLE'));
const Home: NextPage = () => {
  const account = useAccount();

  const { data: isAdmin, isLoading } = useReadContract({
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
    functionName: "hasRole",
    args: [ADMIN_ROLE, account.address], // 判断当前 address 是否有 ADMIN_ROLE
    query: {
      enabled: Boolean(account.address),
    },
  });
  console.log("isAdmin,", isAdmin)

  // 1️⃣ 先用 `simulateContract` 预检查
  // let blockData = useBlockNumber();

  const endBlock = useReadContract({
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
    functionName: 'endBlock',
  })
  // console.log("endBlock,", endBlock)

  const { writeContractAsync, writeContract, error } = useWriteContract();

  const poolData = useReadContract({
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
    functionName: 'pool',
    args: [0],
  });

  // console.log(poolData, "poolData")


  const handleAddPool = async () => {

    writeContract({
      address: ADDRESS_CONTRACT.RccStake,
      abi: ABI_CONTRACT.RCCStake,
      functionName: 'setEndBlock',
      args: [
        1000
      ]
    })

    // try {
    //   writeContract({
    //     address: ADDRESS_CONTRACT.RccStake,
    //     abi: ABI_CONTRACT.RCCStake,
    //     functionName: 'addPool',
    //     args: [
    //       ADDRESS_CONTRACT.AddressZero,
    //       1,
    //       1,
    //       3,
    //       false
    //     ]
    //   })
    // } catch (error) {
    //   console.log(error, "error eeror")
    // }

  }

  let baseRccStakeConfig = {
    address: ADDRESS_CONTRACT.RccStake,
    abi: ABI_CONTRACT.RCCStake,
  }

  // const [poolLength,] = multiContractsResult;
  // console.log(multiContractsResult, "multiContracts !!!");


  return (
    <div>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <Header />
      <main>
        <Container>
          <Typography variant='h6' align='center' >
            Home Page 资源池
          </Typography>
          <Typography variant='body2' align='center' >
            用户：{account.address}
          </Typography>

          <Box sx={{
            marginTop: '30px',
            border: '1px solid #eee',
            borderRadius: '12px',
            p: '20px',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
          }} >
            {
              poolData.data ? <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }} >

                <Table>
                  <TableHead>
                    <TableRow>
                      {/* stTokenAddress: 质押代币的地址。
poolWeight: 质押池的权重，影响奖励分配。
lastRewardBlock: 最后一次计算奖励的区块号。
accRCCPerST: 每个质押代币累积的 RCC 数量。
stTokenAmount: 池中的总质押代币量。
minDepositAmount: 最小质押金额。
unstakeLockedBlocks: 解除质押的锁定区块数。 */}
                      <TableCell>
                        池子ID
                      </TableCell>
                      <TableCell>
                        质押代币的地址
                      </TableCell>
                      <TableCell>
                        质押池的权重
                      </TableCell>
                      <TableCell>
                        最后一次计算奖励的区块号
                      </TableCell>
                      <TableCell>
                        每个质押代币累积的 RCC 数量
                      </TableCell>
                      <TableCell>
                        池中的总质押代币量
                      </TableCell>
                      <TableCell>
                        最小质押金额
                      </TableCell>
                      <TableCell>
                        解除质押的锁定区块数
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>
                        0
                      </TableCell>
                      {(poolData.data || []).map((item, index) => {
                        return <TableCell>
                          {item}
                        </TableCell>
                      })}
                    </TableRow>
                  </TableBody>
                </Table>


              </Box> : <></>
            }
            {
              !poolData.data && <Button
                variant='contained' sx={{ mt: '20px' }} onClick={handleAddPool}>增加池</Button>
            }
            {/* <Button
              variant='contained' sx={{ mt: '20px' }} onClick={() => {
                writeContract({
                  address: ADDRESS_CONTRACT.RccStake,
                  abi: ABI_CONTRACT.RCCStake,
                  functionName: 'setEndBlock',
                  args: [
                    1000
                  ]
                })
              }}>Test</Button> */}
          </Box>
        </Container>
      </main>
    </div>
  );
};

export default Home;
